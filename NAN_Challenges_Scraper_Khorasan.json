{
  "name": "NAN Challenges Scraper - Khorasan Razavi",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 12
            }
          ]
        }
      },
      "id": "schedule-trigger-nan",
      "name": "Every 12 Hours",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -1100,
        300
      ]
    },
    {
      "parameters": {
        "url": "https://test.nan.ac/api/v1/Need/GetAllNeeds",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "Accept-Language",
              "value": "fa-IR,fa;q=0.9,en-US,en;q=0.8"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "http-request-nan",
      "name": "Fetch NAN Challenges (API)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -880,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// پردازش داده‌های API و فیلتر کردن چالش‌های خراسان رضوی\nconst data = $input.item.json;\n\n// تابع تبدیل اعداد به فارسی\nconst faNums = ['۰','۱','۲','۳','۴','۵','۶','۷','۸','۹'];\nfunction toFaDigits(s) {\n  if (s === null || s === undefined) return '';\n  return String(s).replace(/\\d/g, d => faNums[Number(d)]);\n}\n\nconst challenges = [];\n\ntry {\n  // شناسه خراسان رضوی (باید بعداً از API GetProvinces بدست بیاید)\n  // فعلاً از نام استفاده می‌کنیم\n  const KHORASAN_RAZAVI_ID = 30; // این مقدار رو باید بعداً تنظیم کنید\n  \n  // داده‌ها می‌تونن در فرمت‌های مختلف باشن\n  const allNeeds = data.data || data.needs || data.challenges || data;\n  \n  // اگر data یه آرایه نیست، شاید توی یه کلید باشه\n  const needsArray = Array.isArray(allNeeds) ? allNeeds : [];\n  \n  if (needsArray.length === 0) {\n    // برای debug، ببینیم چه کلیدهایی داریم\n    console.log('Keys in data:', Object.keys(data));\n  }\n  \n  // فیلتر کردن چالش‌های خراسان رضوی\n  needsArray.forEach(need => {\n    // بررسی فیلدهای مختلف برای استان\n    const provinceId = need.provinceId || need.province_id || need.provinceID;\n    const provinceName = need.province || need.provinceName || need.استان || '';\n    const provinceIds = need.provinceIds || need.province_ids || [];\n    \n    // چک کردن آیا این چالش برای خراسان رضوی هست\n    let isKhorasanRazavi = false;\n    \n    // روش 1: مقایسه با ID\n    if (provinceId === KHORASAN_RAZAVI_ID) {\n      isKhorasanRazavi = true;\n    }\n    \n    // روش 2: چک کردن آرایه IDs\n    if (Array.isArray(provinceIds) && provinceIds.includes(KHORASAN_RAZAVI_ID)) {\n      isKhorasanRazavi = true;\n    }\n    \n    // روش 3: چک کردن نام استان\n    if (provinceName.includes('خراسان رضوی') || provinceName.includes('مشهد')) {\n      isKhorasanRazavi = true;\n    }\n    \n    // روش 4: اگر provinceIds خالی باشه یا null، ممکنه برای همه استان‌ها باشه\n    // در این صورت می‌تونید تصمیم بگیرید آیا اضافه کنید یا نه\n    \n    if (isKhorasanRazavi) {\n      // استخراج اطلاعات از ساختار JSON\n      // بر اساس snippet شما، ساختار شامل موارد زیر است:\n      \n      const title = need.text || need.title || need.عنوان || '';\n      const dor = need.dor || '';\n      \n      // استخراج مهلت از item3 (بر اساس snippet شما)\n      const deadline = need.item3?.text || need.deadline || need.مهلت || '';\n      \n      // استخراج تعداد ایده از item2\n      const ideasCount = need.item2?.text || '';\n      \n      // استخراج پاداش از item1\n      const reward = need.item1?.text || '';\n      \n      // استخراج لینک (اگر وجود داشته باشد)\n      const link = need.link || need.url || `https://nan.ac/challenges/${need.id || ''}`;\n      \n      challenges.push({\n        id: need.id || '',\n        title: title,\n        description: need.description || need.توضیحات || '',\n        province: 'خراسان رضوی',\n        provinceId: provinceId,\n        deadline: deadline,\n        reward: reward,\n        ideasCount: ideasCount,\n        dor: dor,\n        ribbon: need.ribbon || '',\n        stamp: need.stamp || '',\n        link: link,\n        category: need.category || need.دسته || '',\n        organization: need.organization || need.سازمان || 'NAN'\n      });\n    }\n  });\n  \n  // اگر هیچ چالشی پیدا نشد، برای debug کل ساختار رو برمی‌گردونیم\n  if (challenges.length === 0) {\n    console.log('No challenges found for Khorasan Razavi');\n    console.log('Sample item:', needsArray[0]);\n    console.log('Total items:', needsArray.length);\n  }\n  \n} catch (error) {\n  return [{\n    json: {\n      success: false,\n      error: error.message,\n      errorStack: error.stack,\n      challenges: [],\n      rawData: data // برای debug\n    }\n  }];\n}\n\nreturn [{\n  json: {\n    success: true,\n    challenges: challenges,\n    count: challenges.length,\n    province: 'خراسان رضوی',\n    khorasanRazaviId: KHORASAN_RAZAVI_ID\n  }\n}];"
      },
      "id": "code-parse-nan",
      "name": "Parse & Filter Khorasan Challenges",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -656,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// مقایسه با داده‌های قبلی و تشخیص تغییرات\nconst data = $input.item.json;\nconst currentChallenges = data.challenges || [];\n\nconst workflowStaticData = $getWorkflowStaticData('global');\nconst previousChallenges = workflowStaticData.nanChallenges || {};\n\nconst newChallenges = [];\nconst updatedChallenges = [];\nconst unchangedChallenges = [];\n\nconst currentChallengesMap = {};\ncurrentChallenges.forEach(challenge => {\n  const key = challenge.title.trim();\n  currentChallengesMap[key] = challenge;\n});\n\ncurrentChallenges.forEach(challenge => {\n  const key = challenge.title.trim();\n  const prevChallenge = previousChallenges[key];\n  \n  if (!prevChallenge) {\n    newChallenges.push({\n      ...challenge,\n      changeType: 'new'\n    });\n  } else {\n    const changes = [];\n    \n    if (prevChallenge.deadline !== challenge.deadline) {\n      changes.push({\n        field: 'مهلت',\n        oldValue: prevChallenge.deadline,\n        newValue: challenge.deadline\n      });\n    }\n    \n    if (prevChallenge.description !== challenge.description) {\n      changes.push({\n        field: 'توضیحات',\n        oldValue: prevChallenge.description,\n        newValue: challenge.description\n      });\n    }\n    \n    if (changes.length > 0) {\n      updatedChallenges.push({\n        ...challenge,\n        changeType: 'updated',\n        changes: changes\n      });\n    } else {\n      unchangedChallenges.push({\n        ...challenge,\n        changeType: 'unchanged'\n      });\n    }\n  }\n});\n\nworkflowStaticData.nanChallenges = currentChallengesMap;\nworkflowStaticData.lastCheckTime = new Date().toISOString();\n\nreturn [{\n  json: {\n    success: true,\n    newCount: newChallenges.length,\n    updatedCount: updatedChallenges.length,\n    unchangedCount: unchangedChallenges.length,\n    totalCount: currentChallenges.length,\n    newChallenges: newChallenges,\n    updatedChallenges: updatedChallenges,\n    unchangedChallenges: unchangedChallenges,\n    hasChanges: (newChallenges.length > 0 || updatedChallenges.length > 0)\n  }\n}];"
      },
      "id": "code-detect-nan",
      "name": "Detect Changes",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -432,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// ساخت پیام‌های Telegram\nconst data = $input.item.json;\nconst newChallenges = data.newChallenges || [];\nconst updatedChallenges = data.updatedChallenges || [];\n\nif (!data.hasChanges) {\n  return [{\n    json: {\n      send: false,\n      message: '✅ *بررسی انجام شد*\\n\\nهیچ چالش جدید یا به‌روزرسانی در خراسان رضوی یافت نشد.',\n      messageType: 'no_changes'\n    }\n  }];\n}\n\nconst faNums = ['۰','۱','۲','۳','۴','۵','۶','۷','۸','۹'];\nfunction toFaDigits(s) {\n  if (s === null || s === undefined) return '';\n  return String(s).replace(/\\d/g, d => faNums[Number(d)]);\n}\n\nconst messages = [];\n\n// پیام خلاصه\nlet summaryMsg = `🔔 *چالش‌های نوآوری — خراسان رضوی*\\n\\n`;\nif (newChallenges.length > 0) {\n  summaryMsg += `🆕 چالش‌های جدید: ${toFaDigits(newChallenges.length)}\\n`;\n}\nif (updatedChallenges.length > 0) {\n  summaryMsg += `🔄 چالش‌های به‌روزرسانی شده: ${toFaDigits(updatedChallenges.length)}\\n`;\n}\nsummaryMsg += `\\n📅 زمان بررسی: ${new Date().toLocaleString('fa-IR')}\\n\\n`;\nsummaryMsg += `_در پیام‌های بعدی جزئیات ارسال می‌شود._`;\n\nmessages.push({\n  json: {\n    send: true,\n    message: summaryMsg,\n    messageType: 'summary',\n    index: 0\n  }\n});\n\n// پیام برای چالش‌های جدید\nnewChallenges.forEach((challenge, index) => {\n  let msg = `🆕 *چالش نوآوری جدید*\\n\\n`;\n  \n  if (challenge.title) {\n    msg += `*📌 عنوان:*\\n${challenge.title}\\n\\n`;\n  }\n  \n  if (challenge.organization) {\n    msg += `*🏢 سازمان:*\\n${challenge.organization}\\n\\n`;\n  }\n  \n  if (challenge.category) {\n    msg += `*🏷 دسته‌بندی:*\\n${challenge.category}\\n\\n`;\n  }\n  \n  if (challenge.description) {\n    msg += `*📝 توضیحات:*\\n${challenge.description}\\n\\n`;\n  }\n  \n  if (challenge.deadline) {\n    const deadlineFa = toFaDigits(challenge.deadline);\n    msg += `*⏰ مهلت:*\\n${deadlineFa}\\n\\n`;\n  }\n  \n  msg += `*📍 استان:* خراسان رضوی\\n\\n`;\n  \n  if (challenge.link) {\n    msg += `🔗 [مشاهده جزئیات](${challenge.link})\\n\\n`;\n  }\n  \n  msg += `_🤖 چالش جدید شماره ${toFaDigits(index + 1)} از ${toFaDigits(newChallenges.length)}_`;\n  \n  messages.push({\n    json: {\n      send: true,\n      message: msg,\n      messageType: 'new',\n      challenge: challenge,\n      index: messages.length\n    }\n  });\n});\n\n// پیام برای چالش‌های به‌روزرسانی شده\nupdatedChallenges.forEach((challenge, index) => {\n  let msg = `🔄 *به‌روزرسانی چالش نوآوری*\\n\\n`;\n  \n  if (challenge.title) {\n    msg += `*📌 عنوان:*\\n${challenge.title}\\n\\n`;\n  }\n  \n  msg += `*✏️ تغییرات:*\\n`;\n  \n  challenge.changes.forEach(change => {\n    msg += `\\n▫️ *${change.field}*\\n`;\n    if (change.field === 'مهلت') {\n      msg += `   قبلی: ${toFaDigits(change.oldValue)}\\n`;\n      msg += `   جدید: ${toFaDigits(change.newValue)} ✨\\n`;\n    } else {\n      msg += `   قبلی: ${change.oldValue}\\n`;\n      msg += `   جدید: ${change.newValue} ✨\\n`;\n    }\n  });\n  \n  msg += `\\n*📊 اطلاعات فعلی:*\\n\\n`;\n  \n  if (challenge.organization) {\n    msg += `*🏢 سازمان:* ${challenge.organization}\\n`;\n  }\n  \n  if (challenge.deadline) {\n    msg += `*⏰ مهلت:* ${toFaDigits(challenge.deadline)}\\n`;\n  }\n  \n  if (challenge.link) {\n    msg += `\\n🔗 [مشاهده جزئیات](${challenge.link})\\n\\n`;\n  }\n  \n  msg += `_🤖 به‌روزرسانی شماره ${toFaDigits(index + 1)} از ${toFaDigits(updatedChallenges.length)}_`;\n  \n  messages.push({\n    json: {\n      send: true,\n      message: msg,\n      messageType: 'updated',\n      challenge: challenge,\n      index: messages.length\n    }\n  });\n});\n\nreturn messages;"
      },
      "id": "code-format-nan",
      "name": "Format Telegram Messages",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -208,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.send }}",
              "value2": true
            }
          ]
        },
        "options": {}
      },
      "id": "if-node-nan",
      "name": "Should Send?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        16,
        300
      ]
    },
    {
      "parameters": {
        "amount": 2,
        "unit": "seconds"
      },
      "id": "wait-node-nan",
      "name": "Wait Between Messages",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        256,
        300
      ],
      "webhookId": "wait-nan-messages"
    },
    {
      "parameters": {
        "chatId": "YOUR_TELEGRAM_CHAT_ID_HERE",
        "text": "={{ $json.message }}",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        496,
        300
      ],
      "id": "telegram-node-nan",
      "name": "Send to Telegram",
      "credentials": {
        "telegramApi": {
          "id": "YOUR_TELEGRAM_CREDENTIALS_ID",
          "name": "Telegram account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Every 12 Hours": {
      "main": [
        [
          {
            "node": "Fetch NAN Challenges Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch NAN Challenges Page": {
      "main": [
        [
          {
            "node": "Parse & Filter Khorasan Challenges",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse & Filter Khorasan Challenges": {
      "main": [
        [
          {
            "node": "Detect Changes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Detect Changes": {
      "main": [
        [
          {
            "node": "Format Telegram Messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Telegram Messages": {
      "main": [
        [
          {
            "node": "Should Send?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should Send?": {
      "main": [
        [
          {
            "node": "Wait Between Messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait Between Messages": {
      "main": [
        [
          {
            "node": "Send to Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "nan-scraper-v1",
  "meta": {
    "templateCredsSetupCompleted": false
  },
  "id": "NANChallengesScraper",
  "tags": [
    "scraping",
    "challenges",
    "nan",
    "khorasan",
    "telegram"
  ]
}
