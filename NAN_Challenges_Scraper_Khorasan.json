{
  "name": "NAN Challenges Scraper - Khorasan Razavi",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 12
            }
          ]
        }
      },
      "id": "schedule-trigger-nan",
      "name": "Every 12 Hours",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -1100,
        300
      ]
    },
    {
      "parameters": {
        "url": "https://nan.ac/challenges",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8"
            },
            {
              "name": "Accept-Language",
              "value": "fa-IR,fa;q=0.9,en-US,en;q=0.8"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Upgrade-Insecure-Requests",
              "value": "1"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "document"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "navigate"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "none"
            },
            {
              "name": "Cache-Control",
              "value": "max-age=0"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "id": "http-request-nan",
      "name": "Fetch NAN Challenges Page",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -880,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Parse HTML and extract challenges for Khorasan Razavi\nconst html = $input.item.json;\nconst htmlContent = typeof html === 'string' ? html : html.data || '';\n\n// تابع تبدیل اعداد به فارسی\nconst faNums = ['۰','۱','۲','۳','۴','۵','۶','۷','۸','۹'];\nfunction toFaDigits(s) {\n  if (s === null || s === undefined) return '';\n  return String(s).replace(/\\d/g, d => faNums[Number(d)]);\n}\n\nconst challenges = [];\n\ntry {\n  // روش 1: اگر داده‌ها در JSON داخل صفحه باشند\n  const jsonMatch = htmlContent.match(/<script[^>]*>.*?var\\s+challenges\\s*=\\s*(\\[.*?\\]);/s);\n  if (jsonMatch) {\n    const challengesData = JSON.parse(jsonMatch[1]);\n    \n    // فیلتر کردن چالش‌های خراسان رضوی\n    challengesData.forEach(challenge => {\n      const province = challenge.province || challenge.استان || challenge.location || '';\n      if (province.includes('خراسان رضوی') || province.includes('Khorasan Razavi') || province.includes('مشهد')) {\n        challenges.push({\n          title: challenge.title || challenge.عنوان || '',\n          description: challenge.description || challenge.توضیحات || '',\n          province: province,\n          category: challenge.category || challenge.دسته || '',\n          deadline: challenge.deadline || challenge.مهلت || '',\n          link: challenge.link || challenge.لینک || '',\n          organization: challenge.organization || challenge.سازمان || ''\n        });\n      }\n    });\n  }\n  \n  // روش 2: اگر داده‌ها در HTML Cards باشند\n  if (challenges.length === 0) {\n    // استخراج card ها یا div های چالش‌ها\n    const cardRegex = /<div[^>]*class=\"[^\"]*challenge[^\"]*\"[^>]*>(.*?)<\\/div>/gis;\n    const cards = htmlContent.match(cardRegex) || [];\n    \n    cards.forEach(card => {\n      // بررسی اینکه آیا این کارت مربوط به خراسان رضوی هست\n      if (card.includes('خراسان رضوی') || card.includes('Khorasan Razavi') || card.includes('مشهد')) {\n        // استخراج عنوان\n        const titleMatch = card.match(/<h[1-6][^>]*>(.*?)<\\/h[1-6]>/i);\n        const title = titleMatch ? titleMatch[1].replace(/<[^>]+>/g, '').trim() : '';\n        \n        // استخراج توضیحات\n        const descMatch = card.match(/<p[^>]*>(.*?)<\\/p>/i);\n        const description = descMatch ? descMatch[1].replace(/<[^>]+>/g, '').trim() : '';\n        \n        // استخراج لینک\n        const linkMatch = card.match(/href=\"([^\"]+)\"/i);\n        const link = linkMatch ? linkMatch[1] : '';\n        \n        if (title) {\n          challenges.push({\n            title: title,\n            description: description,\n            province: 'خراسان رضوی',\n            link: link.startsWith('http') ? link : `https://nan.ac${link}`,\n            category: '',\n            deadline: '',\n            organization: ''\n          });\n        }\n      }\n    });\n  }\n  \n  // روش 3: اگر ساختار دیگری داره (برای debug)\n  if (challenges.length === 0) {\n    // در این صورت، کل محتوای صفحه رو برای بررسی ذخیره می‌کنیم\n    // شما باید ساختار واقعی سایت رو بررسی کنید و regex ها رو تنظیم کنید\n    \n    // برای تست، یه نمونه اضافه می‌کنیم\n    challenges.push({\n      title: 'لطفاً ساختار سایت را بررسی کنید',\n      description: 'باید کد پارس HTML را با ساختار واقعی سایت تنظیم کنید',\n      province: 'خراسان رضوی',\n      link: 'https://nan.ac/challenges',\n      category: 'تست',\n      deadline: '',\n      organization: 'NAN',\n      rawHtmlLength: htmlContent.length\n    });\n  }\n  \n} catch (error) {\n  return [{\n    json: {\n      success: false,\n      error: error.message,\n      challenges: []\n    }\n  }];\n}\n\nreturn [{\n  json: {\n    success: true,\n    challenges: challenges,\n    count: challenges.length,\n    province: 'خراسان رضوی'\n  }\n}];"
      },
      "id": "code-parse-nan",
      "name": "Parse & Filter Khorasan Challenges",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -656,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// مقایسه با داده‌های قبلی و تشخیص تغییرات\nconst data = $input.item.json;\nconst currentChallenges = data.challenges || [];\n\nconst workflowStaticData = $getWorkflowStaticData('global');\nconst previousChallenges = workflowStaticData.nanChallenges || {};\n\nconst newChallenges = [];\nconst updatedChallenges = [];\nconst unchangedChallenges = [];\n\nconst currentChallengesMap = {};\ncurrentChallenges.forEach(challenge => {\n  const key = challenge.title.trim();\n  currentChallengesMap[key] = challenge;\n});\n\ncurrentChallenges.forEach(challenge => {\n  const key = challenge.title.trim();\n  const prevChallenge = previousChallenges[key];\n  \n  if (!prevChallenge) {\n    newChallenges.push({\n      ...challenge,\n      changeType: 'new'\n    });\n  } else {\n    const changes = [];\n    \n    if (prevChallenge.deadline !== challenge.deadline) {\n      changes.push({\n        field: 'مهلت',\n        oldValue: prevChallenge.deadline,\n        newValue: challenge.deadline\n      });\n    }\n    \n    if (prevChallenge.description !== challenge.description) {\n      changes.push({\n        field: 'توضیحات',\n        oldValue: prevChallenge.description,\n        newValue: challenge.description\n      });\n    }\n    \n    if (changes.length > 0) {\n      updatedChallenges.push({\n        ...challenge,\n        changeType: 'updated',\n        changes: changes\n      });\n    } else {\n      unchangedChallenges.push({\n        ...challenge,\n        changeType: 'unchanged'\n      });\n    }\n  }\n});\n\nworkflowStaticData.nanChallenges = currentChallengesMap;\nworkflowStaticData.lastCheckTime = new Date().toISOString();\n\nreturn [{\n  json: {\n    success: true,\n    newCount: newChallenges.length,\n    updatedCount: updatedChallenges.length,\n    unchangedCount: unchangedChallenges.length,\n    totalCount: currentChallenges.length,\n    newChallenges: newChallenges,\n    updatedChallenges: updatedChallenges,\n    unchangedChallenges: unchangedChallenges,\n    hasChanges: (newChallenges.length > 0 || updatedChallenges.length > 0)\n  }\n}];"
      },
      "id": "code-detect-nan",
      "name": "Detect Changes",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -432,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// ساخت پیام‌های Telegram\nconst data = $input.item.json;\nconst newChallenges = data.newChallenges || [];\nconst updatedChallenges = data.updatedChallenges || [];\n\nif (!data.hasChanges) {\n  return [{\n    json: {\n      send: false,\n      message: '✅ *بررسی انجام شد*\\n\\nهیچ چالش جدید یا به‌روزرسانی در خراسان رضوی یافت نشد.',\n      messageType: 'no_changes'\n    }\n  }];\n}\n\nconst faNums = ['۰','۱','۲','۳','۴','۵','۶','۷','۸','۹'];\nfunction toFaDigits(s) {\n  if (s === null || s === undefined) return '';\n  return String(s).replace(/\\d/g, d => faNums[Number(d)]);\n}\n\nconst messages = [];\n\n// پیام خلاصه\nlet summaryMsg = `🔔 *چالش‌های نوآوری — خراسان رضوی*\\n\\n`;\nif (newChallenges.length > 0) {\n  summaryMsg += `🆕 چالش‌های جدید: ${toFaDigits(newChallenges.length)}\\n`;\n}\nif (updatedChallenges.length > 0) {\n  summaryMsg += `🔄 چالش‌های به‌روزرسانی شده: ${toFaDigits(updatedChallenges.length)}\\n`;\n}\nsummaryMsg += `\\n📅 زمان بررسی: ${new Date().toLocaleString('fa-IR')}\\n\\n`;\nsummaryMsg += `_در پیام‌های بعدی جزئیات ارسال می‌شود._`;\n\nmessages.push({\n  json: {\n    send: true,\n    message: summaryMsg,\n    messageType: 'summary',\n    index: 0\n  }\n});\n\n// پیام برای چالش‌های جدید\nnewChallenges.forEach((challenge, index) => {\n  let msg = `🆕 *چالش نوآوری جدید*\\n\\n`;\n  \n  if (challenge.title) {\n    msg += `*📌 عنوان:*\\n${challenge.title}\\n\\n`;\n  }\n  \n  if (challenge.organization) {\n    msg += `*🏢 سازمان:*\\n${challenge.organization}\\n\\n`;\n  }\n  \n  if (challenge.category) {\n    msg += `*🏷 دسته‌بندی:*\\n${challenge.category}\\n\\n`;\n  }\n  \n  if (challenge.description) {\n    msg += `*📝 توضیحات:*\\n${challenge.description}\\n\\n`;\n  }\n  \n  if (challenge.deadline) {\n    const deadlineFa = toFaDigits(challenge.deadline);\n    msg += `*⏰ مهلت:*\\n${deadlineFa}\\n\\n`;\n  }\n  \n  msg += `*📍 استان:* خراسان رضوی\\n\\n`;\n  \n  if (challenge.link) {\n    msg += `🔗 [مشاهده جزئیات](${challenge.link})\\n\\n`;\n  }\n  \n  msg += `_🤖 چالش جدید شماره ${toFaDigits(index + 1)} از ${toFaDigits(newChallenges.length)}_`;\n  \n  messages.push({\n    json: {\n      send: true,\n      message: msg,\n      messageType: 'new',\n      challenge: challenge,\n      index: messages.length\n    }\n  });\n});\n\n// پیام برای چالش‌های به‌روزرسانی شده\nupdatedChallenges.forEach((challenge, index) => {\n  let msg = `🔄 *به‌روزرسانی چالش نوآوری*\\n\\n`;\n  \n  if (challenge.title) {\n    msg += `*📌 عنوان:*\\n${challenge.title}\\n\\n`;\n  }\n  \n  msg += `*✏️ تغییرات:*\\n`;\n  \n  challenge.changes.forEach(change => {\n    msg += `\\n▫️ *${change.field}*\\n`;\n    if (change.field === 'مهلت') {\n      msg += `   قبلی: ${toFaDigits(change.oldValue)}\\n`;\n      msg += `   جدید: ${toFaDigits(change.newValue)} ✨\\n`;\n    } else {\n      msg += `   قبلی: ${change.oldValue}\\n`;\n      msg += `   جدید: ${change.newValue} ✨\\n`;\n    }\n  });\n  \n  msg += `\\n*📊 اطلاعات فعلی:*\\n\\n`;\n  \n  if (challenge.organization) {\n    msg += `*🏢 سازمان:* ${challenge.organization}\\n`;\n  }\n  \n  if (challenge.deadline) {\n    msg += `*⏰ مهلت:* ${toFaDigits(challenge.deadline)}\\n`;\n  }\n  \n  if (challenge.link) {\n    msg += `\\n🔗 [مشاهده جزئیات](${challenge.link})\\n\\n`;\n  }\n  \n  msg += `_🤖 به‌روزرسانی شماره ${toFaDigits(index + 1)} از ${toFaDigits(updatedChallenges.length)}_`;\n  \n  messages.push({\n    json: {\n      send: true,\n      message: msg,\n      messageType: 'updated',\n      challenge: challenge,\n      index: messages.length\n    }\n  });\n});\n\nreturn messages;"
      },
      "id": "code-format-nan",
      "name": "Format Telegram Messages",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -208,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.send }}",
              "value2": true
            }
          ]
        },
        "options": {}
      },
      "id": "if-node-nan",
      "name": "Should Send?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        16,
        300
      ]
    },
    {
      "parameters": {
        "amount": 2,
        "unit": "seconds"
      },
      "id": "wait-node-nan",
      "name": "Wait Between Messages",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        256,
        300
      ],
      "webhookId": "wait-nan-messages"
    },
    {
      "parameters": {
        "chatId": "YOUR_TELEGRAM_CHAT_ID_HERE",
        "text": "={{ $json.message }}",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        496,
        300
      ],
      "id": "telegram-node-nan",
      "name": "Send to Telegram",
      "credentials": {
        "telegramApi": {
          "id": "YOUR_TELEGRAM_CREDENTIALS_ID",
          "name": "Telegram account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Every 12 Hours": {
      "main": [
        [
          {
            "node": "Fetch NAN Challenges Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch NAN Challenges Page": {
      "main": [
        [
          {
            "node": "Parse & Filter Khorasan Challenges",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse & Filter Khorasan Challenges": {
      "main": [
        [
          {
            "node": "Detect Changes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Detect Changes": {
      "main": [
        [
          {
            "node": "Format Telegram Messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Telegram Messages": {
      "main": [
        [
          {
            "node": "Should Send?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should Send?": {
      "main": [
        [
          {
            "node": "Wait Between Messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait Between Messages": {
      "main": [
        [
          {
            "node": "Send to Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "nan-scraper-v1",
  "meta": {
    "templateCredsSetupCompleted": false
  },
  "id": "NANChallengesScraper",
  "tags": [
    "scraping",
    "challenges",
    "nan",
    "khorasan",
    "telegram"
  ]
}
