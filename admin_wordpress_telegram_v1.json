{
  "name": "My workflow 4",
  "nodes": [
    {
      "parameters": {
        "url": "={{ $json[\"link\"] }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -832,
        -96
      ],
      "id": "b3f50cc9-83e2-449d-b986-991197b81286",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "url": "https://wesh.ir/feed/",
        "options": {}
      },
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1.2,
      "position": [
        -1184,
        256
      ],
      "id": "d841de00-c815-4d2b-aca2-864988384b43",
      "name": "RSS Read"
    },
    {
      "parameters": {
        "operation": "extractHtmlContent",
        "extractionValues": {
          "values": [
            {
              "key": "title",
              "cssSelector": "title"
            },
            {
              "key": "content",
              "cssSelector": "div.elementor-widget-container p"
            },
            {
              "key": "ogImage",
              "cssSelector": "meta[property='og:image']",
              "returnValue": "attribute",
              "attribute": "content"
            },
            {
              "key": "twitterImage",
              "cssSelector": "meta[name='twitter:image']",
              "returnValue": "attribute",
              "attribute": "content"
            },
            {
              "key": "featuredImage",
              "cssSelector": "img.attachment-full, img[class*='wp-image-'], img.wp-post-image, .post-thumbnail img",
              "returnValue": "attribute",
              "attribute": "src"
            },
            {
              "key": "firstLargeImage",
              "cssSelector": "article.post img, .entry-content img, .elementor-widget-container img, main img",
              "returnValue": "attribute",
              "attribute": "src"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        -704,
        256
      ],
      "id": "4080f1d4-4514-4a26-bebc-19d115c4602d",
      "name": "HTML"
    },
    {
      "parameters": {
        "jsCode": "const title = $input.first().json.title || 'بدون عنوان';\nconst content = $input.first().json.content || '';\nconst link = $input.first().json.link || '';\nconst imageUrl = $input.first().json.imageUrl || '';\n\n// ساخت متن خلاصه‌سازی با درخواست JSON\nconst prompt = `لطفاً این خبر را به فارسی و به صورت خلاصه، روان و جذاب خلاصه کن (حداکثر ۳ پاراگراف).\\n\\nمتن خبر:\\n${content}\\n\\nخروجی را حتماً به صورت JSON با فرمت زیر برگردان:\\n{\\n  \"title\": \"${title}\",\\n  \"summary\": \"متن خلاصه شده\",\\n  \"imageUrl\": \"${imageUrl}\",\\n  \"link\": \"${link}\"\\n}`;\n\nreturn [{\n  json: {\n    prompt\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -464,
        -112
      ],
      "id": "d8139ec1-ab9a-4da4-aaad-5381005da15b",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "operation": "sendPhoto",
        "chatId": "-1003140416257",
        "file": "={{ $json.photo }}",
        "additionalFields": {
          "caption": "={{ $json.caption }}",
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        256,
        64
      ],
      "id": "8ca64d59-1e11-414d-aaac-628dc71b0e41",
      "name": "Send a photo message",
      "webhookId": "0f87e073-af12-400a-906e-6b55dfca20c7",
      "credentials": {
        "telegramApi": {
          "id": "w3HIcBgC88omBsJ7",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const item = $input.item.json;\n\n// استخراج پاسخ Gemini\nconst response = item.candidates[0].content.parts[0].text;\n\n// پاک‌سازی و parse کردن JSON\nlet cleanResponse = response.replace(/```json\\n?/g, '').replace(/```\\n?/g, '').trim();\n\nlet parsedData;\ntry {\n    parsedData = JSON.parse(cleanResponse);\n} catch (e) {\n    console.error('Parse error:', e);\n    return [];\n}\n\n// فرمت نهایی برای تلگرام\nconst title = parsedData.title || '';\nconst summary = parsedData.summary || '';\nconst imageUrl = parsedData.imageUrl || '';\nconst link = parsedData.link || '';\n\n// ساخت پیام با فرمت HTML و ایموجی‌های رسمی\nconst caption = `📰 <b>${title}</b>\\n\\n${summary}\\n\\n🔗 <a href=\"${link}\">ادامه مطلب در وبسایت</a>\\n\\n📡 @wesh_ir`;\n\n// اگر تصویر نبود، از لوگوی سایت استفاده کن\nconst finalImage = imageUrl || 'https://wesh.ir/wp-content/uploads/2024/03/WESH.IR-LOGO-3-1024x469.png';\n\nreturn [{\n    json: {\n        caption: caption,\n        photo: finalImage\n    }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -48,
        48
      ],
      "id": "022d37e8-9fb5-42e0-addd-aa15a7335954",
      "name": "Code in JavaScript2"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtMinute": 15
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -1360,
        240
      ],
      "id": "3a2c64e9-05ae-437d-ad37-ecd4c5e3cf1b",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://generativelanguage.googleapis.com/v1/models/gemini-2.5-flash:generateContent?key=AIzaSyDjuVZgrG_jwRm1qGcvW2IpW4qAjis3dD4",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"contents\": [\n    {\n      \"parts\": [\n        {\n          \"text\": $json.prompt\n        }\n      ]\n    }\n  ]\n} }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -240,
        -192
      ],
      "id": "faba3f45-adad-47ad-8ddf-da81675bf0f9",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nreturn items.map(item => {\n  try {\n    const data = item.json;\n    const decodedLink = decodeURIComponent(data.link);\n    \n    // استخراج تصویر از content:encoded با regex\n    const htmlContent = data['content:encoded'] || '';\n    const imgRegex = /<img[^>]+src=\"([^\"]+)\"[^>]*>/gi;\n    const matches = [...htmlContent.matchAll(imgRegex)];\n    \n    // فیلتر کردن تصاویر معتبر\n    const invalidKeywords = ['aparat', 'icon', 'logo', 'avatar', 'placeholder', 'default', 'emoji'];\n    const validImages = matches\n      .map(m => m[1])\n      .filter(url => {\n        const urlLower = url.toLowerCase();\n        return !invalidKeywords.some(k => urlLower.includes(k));\n      });\n    \n    const imageUrl = validImages[0] || '';\n    const contentText = data['content:encodedSnippet'] || data.contentSnippet || '';\n    \n    return { \n      json: { \n        title: data.title,\n        link: decodedLink,\n        content: contentText,\n        imageUrl: imageUrl\n      } \n    };\n  } catch (e) {\n    console.error('Parse error:', e);\n    return item;\n  }\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1024,
        -176
      ],
      "id": "4e91a350-a015-431d-b54a-6c0d96a3ad67",
      "name": "Code in JavaScript3"
    },
    {
      "parameters": {
        "jsCode": "const htmlContent = json['content:encoded'] || json.content || json.summary || '';\nif (htmlContent) {\n  try {\n    // Decode content:encoded\n    const decodedHtml = decodeURIComponent(htmlContent);\n    const html = decodedHtml.toString();\n    \n    // Search for <img>\n    let match = html.match(/<img[^>]+src=[\"']([^\"']+)[\"']/i);\n    if (!match) match = html.match(/<img[^>]+data-src=[\"']([^\"']+)[\"']/i);\n    if (!match) match = html.match(/<img[^>]+data-lazy-src=[\"']([^\"']+)[\"']/i);\n    \n    if (match) {\n      imageUrl = match[1].trim();\n      imageSource = 'content:encoded';\n    }\n  } catch (e) {\n    // Skip if decode fails\n  }\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3936,
        6320
      ],
      "id": "4e7a4733-6e7f-4dec-90b7-b99f373e36d5",
      "name": "extractImageFromFeed"
    },
    {
      "parameters": {
        "jsCode": "// Helper function to validate image URL\nfunction isValidImageUrl(url) {\n  if (!url) return false;\n  \n  const urlLower = url.toLowerCase().trim();\n  \n  const invalidKeywords = ['aparat', 'logo', 'icon', 'banner', 'avatar', 'placeholder'];\n  const videoExtensions = ['.mp4', '.webm', '.avi', '.mov', '.flv', '.mkv', '.m4v', '.3gp'];\n  const validImageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.svg'];\n  \n  const hasVideoExtension = videoExtensions.some(ext => urlLower.includes(ext));\n  const hasInvalidKeyword = invalidKeywords.some(k => urlLower.includes(k));\n  const hasValidImageExtension = validImageExtensions.some(ext => urlLower.endsWith(ext));\n  \n  return !hasVideoExtension && !hasInvalidKeyword && hasValidImageExtension;\n}\n\n// Helper function to parse srcset and get largest image\nfunction parseSrcset(srcsetString) {\n  if (!srcsetString) return null;\n  \n  const pairs = [...srcsetString.matchAll(/(\\S+)\\s+(\\d+)w/g)];\n  if (pairs.length > 0) {\n    pairs.sort((a, b) => parseInt(b[2]) - parseInt(a[2]));\n    return pairs[0][1].trim();\n  }\n  return null;\n}\n\n// Helper function to normalize URL (relative to absolute)\nfunction normalizeUrl(url, baseUrl) {\n  if (!url) return null;\n  \n  url = url.trim();\n  \n  // Already absolute\n  if (url.startsWith('http://') || url.startsWith('https://')) {\n    return url;\n  }\n  \n  // Make absolute\n  try {\n    const base = new URL(baseUrl);\n    return new URL(url, baseUrl).href;\n  } catch (e) {\n    return url; // Return as-is if URL parsing fails\n  }\n}\n\n// Main logic\nconst htmlData = $input.first().json;\nconst rssData = $input.all()[0].json;\n\nconst title = htmlData.title || rssData.title || 'بدون عنوان';\nconst content = Array.isArray(htmlData.content) ? htmlData.content.join(' ') : (htmlData.content || '');\nconst link = rssData.link || '';\n\n// Image selection priority\nlet imageUrl = null;\nlet imageSource = null;\n\n// 1. RSS feed image (from extractImageFromFeed)\nif (rssData.imageUrl) {\n  imageUrl = rssData.imageUrl;\n  imageSource = rssData.imageSource || 'rss';\n}\n\n// 2. og:image\nif (!imageUrl && htmlData.ogImage) {\n  imageUrl = htmlData.ogImage;\n  imageSource = 'og:image';\n}\n\n// 3. twitter:image  \nif (!imageUrl && htmlData.twitterImage) {\n  imageUrl = htmlData.twitterImage;\n  imageSource = 'twitter:image';\n}\n\n// 4. figure.wp-block-image img\nif (!imageUrl && htmlData.figureImg) {\n  imageUrl = htmlData.figureImg;\n  imageSource = 'figure';\n}\n\n// 5. elementor images\nif (!imageUrl && htmlData.elementorImg) {\n  imageUrl = htmlData.elementorImg;\n  imageSource = 'elementor';\n}\n\n// 6. lazy loaded images\nif (!imageUrl && htmlData.lazyImg) {\n  imageUrl = htmlData.lazyImg;\n  imageSource = 'lazy-img';\n}\n\n// 6b. lazy loaded srcset\nif (!imageUrl && htmlData.lazyImgSrcset) {\n  const parsed = parseSrcset(htmlData.lazyImgSrcset);\n  if (parsed) {\n    imageUrl = parsed;\n    imageSource = 'lazy-srcset';\n  }\n}\n\n// 7. article first image\nif (!imageUrl && htmlData.articleFirstImg) {\n  imageUrl = htmlData.articleFirstImg;\n  imageSource = 'article';\n}\n\n// Normalize URL\nif (imageUrl) {\n  imageUrl = normalizeUrl(imageUrl, link);\n}\n\n// Validate image\nconst imageFound = isValidImageUrl(imageUrl);\nconst finalImageUrl = imageFound ? imageUrl : '';\n\n// Prepare prompt for Gemini\nconst prompt = `لطفاً این خبر را به فارسی و به صورت خلاصه، روان و جذاب خلاصه کن (حداکثر ۳ پاراگراف).\\n\\nمتن خبر:\\n${content}\\n\\nخروجی را حتماً به صورت JSON با فرمت زیر برگردان:\\n{\\n  \"title\": \"${title}\",\\n  \"summary\": \"متن خلاصه شده\"\\n}`;\n\nreturn [{\n  json: {\n    prompt: prompt,\n    originalTitle: title,\n    link: link,\n    imageUrl: finalImageUrl,\n    imageSource: imageSource,\n    imageFound: imageFound\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3440,
        6576
      ],
      "id": "e2a47c15-d627-4780-857e-c7489eddaa0c",
      "name": "chooseAndNormalizeImage"
    },
    {
      "parameters": {
        "jsCode": "const item = $input.item.json;\n\n// استخراج پاسخ Gemini\nconst response = item.candidates[0].content.parts[0].text;\n\n// پاک‌سازی و parse کردن JSON\nlet cleanResponse = response.replace(/```json\\n?/g, '').replace(/```\\n?/g, '').trim();\n\nlet parsedData;\ntry {\n    parsedData = JSON.parse(cleanResponse);\n} catch (e) {\n    console.error('Parse error:', e);\n    return [];\n}\n\n// Get original data from previous node (from HTTP Request1 input)\nconst inputData = $input.first().json;\nconst originalTitle = inputData.originalTitle || '';\nconst link = inputData.link || '';\nconst imageUrl = inputData.imageUrl || '';\nconst imageFound = inputData.imageFound || false;\nconst imageSource = inputData.imageSource || 'none';\n\n// فرمت نهایی برای تلگرام\nconst title = parsedData.title || originalTitle;\nlet summary = parsedData.summary || '';\n\n// ساخت پیام با فرمت HTML و ایموجی‌های رسمی\nlet caption = `📰 <b>${title}</b>\\n\\n${summary}\\n\\n🔗 <a href=\"${link}\">ادامه مطلب در وبسایت</a>\\n\\n📡 @wesh_ir`;\n\n// محدود کردن caption به 950 کاراکتر (تلگرام حداکثر 1024 دارد)\nif (caption.length > 950) {\n  const maxSummaryLength = 950 - title.length - link.length - 100; // 100 برای ایموجی و فرمت\n  summary = summary.substring(0, maxSummaryLength) + '...';\n  caption = `📰 <b>${title}</b>\\n\\n${summary}\\n\\n🔗 <a href=\"${link}\">ادامه مطلب در وبسایت</a>\\n\\n📡 @wesh_ir`;\n}\n\nreturn [{\n    json: {\n        caption: caption,\n        imageUrl: imageUrl,\n        imageFound: imageFound,\n        imageSource: imageSource\n    }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2864,
        6720
      ],
      "id": "c4bb98df-fa84-46f6-9191-5fc4244194af",
      "name": "formatForTelegram"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "boolean1",
              "leftValue": "={{ $json.imageFound }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            },
            {
              "id": "string1",
              "leftValue": "={{ $json.imageUrl }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            },
            {
              "id": "string2",
              "leftValue": "={{ $json.imageUrl }}",
              "rightValue": "http",
              "operator": {
                "type": "string",
                "operation": "startsWith"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -2672,
        6720
      ],
      "id": "5794930a-7086-4f3a-ae20-d0e49806a922",
      "name": "checkImageExists"
    },
    {
      "parameters": {
        "url": "={{ $json.imageUrl }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8"
            },
            {
              "name": "Referer",
              "value": "https://wesh.ir/"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9,fa;q=0.8"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          },
          "timeout": 60000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2464,
        6832
      ],
      "id": "0082c4e6-d7c5-401e-b2ff-016236de729e",
      "name": "downloadImage"
    },
    {
      "parameters": {
        "mode": "jsonToBinary",
        "options": {
          "fileName": "={{ $json.imageUrl.split('/').pop() }}",
          "mimeType": "image/jpeg"
        }
      },
      "type": "n8n-nodes-base.moveBinaryData",
      "typeVersion": 1,
      "position": [
        -2320,
        6832
      ],
      "id": "e9b14b63-89f2-420b-9bda-89ba3ed62e81",
      "name": "setBinaryData"
    },
    {
      "parameters": {
        "chatId": "-1003140416257",
        "text": "={{ $json.caption }}",
        "additionalFields": {
          "disable_web_page_preview": false,
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -2464,
        7088
      ],
      "id": "3216d2f9-71b0-46b3-8b51-87df5c320fe8",
      "name": "Send text message",
      "webhookId": "69afc4d0-5dc0-416b-9bfa-572a6abd1b92",
      "credentials": {
        "telegramApi": {
          "id": "w3HIcBgC88omBsJ7",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtMinute": 15
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -4304,
        6720
      ],
      "id": "a2e40fef-b0d8-4286-bb59-d9fb739a3179",
      "name": "Schedule Trigger1"
    },
    {
      "parameters": {
        "url": "https://wesh.ir/feed/",
        "options": {}
      },
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1.2,
      "position": [
        -4160,
        6928
      ],
      "id": "6af22df5-b5a0-4c30-8481-b83c17f5bc81",
      "name": "RSS Read1"
    },
    {
      "parameters": {
        "url": "={{ $json[\"link\"] }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9,fa;q=0.8"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3808,
        6592
      ],
      "id": "abd15d6a-6d6d-4259-af8b-fab39101db61",
      "name": "HTTP Request2"
    },
    {
      "parameters": {
        "operation": "extractHtmlContent",
        "extractionValues": {
          "values": [
            {
              "key": "title",
              "cssSelector": "title"
            },
            {
              "key": "content",
              "cssSelector": "div.elementor-widget-container p"
            },
            {
              "key": "ogImage",
              "cssSelector": "meta[property=\"og:image\"]",
              "returnValue": "attribute",
              "attribute": "content"
            },
            {
              "key": "twitterImage",
              "cssSelector": "meta[name=\"twitter:image\"]",
              "returnValue": "attribute",
              "attribute": "content"
            },
            {
              "key": "figureImg",
              "cssSelector": "figure.wp-block-image img",
              "returnValue": "attribute",
              "attribute": "src"
            },
            {
              "key": "elementorImg",
              "cssSelector": ".elementor-widget-theme-post-featured-image img, .elementor-widget-image img, img.attachment-full",
              "returnValue": "attribute",
              "attribute": "src"
            },
            {
              "key": "lazyImg",
              "cssSelector": "img[loading=\"lazy\"]",
              "returnValue": "attribute",
              "attribute": "src"
            },
            {
              "key": "lazyImgSrcset",
              "cssSelector": "img[loading=\"lazy\"]",
              "returnValue": "attribute",
              "attribute": "srcset"
            },
            {
              "key": "articleFirstImg",
              "cssSelector": "article img, .entry-content img",
              "returnValue": "attribute",
              "attribute": "src"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        -3680,
        6928
      ],
      "id": "32eefacd-0f5c-4432-8b3d-9481fcdd781e",
      "name": "HTML1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://generativelanguage.googleapis.com/v1/models/gemini-2.5-flash:generateContent?key=AIzaSyDjuVZgrG_jwRm1qGcvW2IpW4qAjis3dD4",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"contents\": [\n    {\n      \"parts\": [\n        {\n          \"text\": $json.prompt\n        }\n      ]\n    }\n  ]\n} }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3216,
        6496
      ],
      "id": "f90c1bff-4351-45b8-b639-d8a72f6e5db1",
      "name": "HTTP Request3"
    },
    {
      "parameters": {
        "operation": "sendPhoto",
        "chatId": "-1003140416257",
        "binaryData": true,
        "additionalFields": {
          "caption": "={{ $json.caption }}",
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -2176,
        6832
      ],
      "id": "555a274a-f0d7-4cd4-beba-f65cb0dbfed8",
      "name": "Send a photo message1",
      "webhookId": "c924694d-6fd2-40f2-a407-08bbc0e46217"
    },
    {
      "parameters": {
        "operation": "extractHtmlContent",
        "extractionValues": {
          "values": [
            {
              "key": "title",
              "cssSelector": "title"
            },
            {
              "key": "content",
              "cssSelector": "p"
            },
            {
              "key": "imageUrl",
              "cssSelector": "figure img",
              "returnValue": "attribute",
              "attribute": "src"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        -3984,
        6816
      ],
      "id": "67a64b5d-ea24-417d-9cf1-7b07d0467e6d",
      "name": "HTML2"
    },
    {
      "parameters": {
        "jsCode": "// Decode Link and Validate\nconst items = $input.all();\nconst validItems = [];\n\nfor (const item of items) {\n  const json = item.json;\n  \n  // Get and validate link\n  let link = json.link || '';\n  link = link.trim();\n  \n  // Skip items without valid link\n  if (!link || link.length < 10 || (!link.startsWith('http://') && !link.startsWith('https://'))) {\n    console.log('Skipping item with invalid link:', link);\n    continue;\n  }\n  \n  // Decode URL-encoded characters\n  try {\n    link = decodeURIComponent(link);\n  } catch (e) {\n    // keep original if decode fails\n  }\n  \n  // Keep original data + decoded link\n  validItems.push({\n    json: {\n      ...json,\n      link: link,\n      originalTitle: json.title || 'بدون عنوان'\n    }\n  });\n}\n\nreturn validItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -49088,
        8496
      ],
      "id": "dd721f7f-dbd8-4e1f-a152-b041e9686500",
      "name": "Decode Link"
    },
    {
      "parameters": {
        "operation": "extractHtmlContent",
        "extractionValues": {
          "values": [
            {
              "key": "title",
              "cssSelector": "title"
            },
            {
              "key": "imageUrl",
              "cssSelector": ".elementor-widget-theme-post-featured-image img",
              "returnValue": "attribute",
              "attribute": "src"
            },
            {
              "key": "content",
              "cssSelector": ".elementor-widget-theme-post-content p"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        -48640,
        8496
      ],
      "id": "473a669e-2a4f-49d7-978b-6a0b519b9910",
      "name": "HTML Extract"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst outputItems = [];\n\nfor (const item of items) {\n  const json = item.json;\n\n  // --- 1. استخراج داده‌ها ---\n  const title = json.title || json.originalTitle || 'بدون عنوان';\n  const link = json.link || '';\n  let imageUrl = json.imageUrl || '';\n\n  // --- 2. مدیریت محتوای متنی ---\n  let contentString = '';\n  if (Array.isArray(json.content)) {\n    // اگر محتوا آرایه‌ای از پاراگراف‌ها بود، آن‌ها را با دو خط جدید به هم بچسبان\n    contentString = json.content.join('\\n\\n');\n  } else if (json.content) {\n    // اگر رشته بود، همان را استفاده کن\n    contentString = json.content;\n  }\n\n  // --- 3. اعتبارسنجی URL عکس ---\n  if (imageUrl) {\n    imageUrl = imageUrl.trim();\n    try {\n      if (imageUrl.includes('%')) {\n        imageUrl = decodeURIComponent(imageUrl);\n      }\n    } catch (e) { /* نادیده گرفتن خطای decode */ }\n    \n    if (!imageUrl.startsWith('http://') && !imageUrl.startsWith('https://')) {\n      imageUrl = '';\n    }\n  }\n\n  // --- 4. ساخت خلاصه ---\n  // 500 کاراکتر اول محتوا را به عنوان خلاصه برمی‌داریم\n  let summary = contentString.substring(0, 500);\n  if (contentString.length > 500) {\n    summary += '...';\n  }\n\n  // --- 5. ساخت کپشن با فرمت جدید (HTML) ---\n  // ❗️نام کانال خود را جایگزین @YourChannelName کنید\n  let caption = `📰 <b>${title}</b>\\n\\n${summary}\\n\\n🔗 <a href=\"${link}\">ادامه مطلب در وبسایت</a>\\n\\n📡 @w_e_s_h`;\n\n  // --- 6. محدودسازی طول کپشن ---\n  // تلگرام برای کپشن عکس محدودیت دارد (حدود 1024 کاراکتر)\n  // ما برای اطمینان روی 950 کاراکتر محدود می‌کنیم\n  if (caption.length > 950) {\n    const overhead = title.length + link.length + 100; // طول متن‌های اضافه\n    const maxSummaryLength = 950 - overhead;\n    summary = contentString.substring(0, maxSummaryLength) + '...';\n    \n    // ساخت مجدد کپشن با خلاصه‌ی کوتاه‌تر\n    caption = `📰 <b>${title}</b>\\n\\n${summary}\\n\\n🔗 <a href=\"${link}\">ادامه مطلب در وبسایت</a>\\n\\n📡 @w_e_s_h`;\n  }\n\n  // --- 7. آماده‌سازی خروجی ---\n  outputItems.push({\n    json: {\n      ...json, // ارسال همه داده‌های قبلی\n      caption: caption,\n      imageUrl: imageUrl,\n      hasImage: Boolean(imageUrl), // فلگ مهم برای نود IF\n      chatId: json.chatId || '-1003140416257' // استفاده از ChatID قبلی\n    }\n  });\n}\n\nreturn outputItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -48432,
        8496
      ],
      "id": "ec29ffde-fb7a-4a0f-918b-a252dccdfc63",
      "name": "Format Message"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "boolean1",
              "leftValue": "={{ $json.hasImage }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            },
            {
              "id": "b24950ef-2320-4991-963c-37894db44769",
              "leftValue": "",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -48208,
        8496
      ],
      "id": "0fc23c73-f24f-4d15-98bb-457a56560e37",
      "name": "Check Image"
    },
    {
      "parameters": {
        "operation": "sendPhoto",
        "chatId": "={{ $json.chatId }}",
        "file": "={{ $json.imageUrl }}",
        "additionalFields": {
          "caption": "={{ $json.caption }}",
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -47984,
        8384
      ],
      "id": "c6d504ee-b3b3-421c-838f-9b70d241efa5",
      "name": "Send Photo",
      "webhookId": "774f8bcc-2ba5-4289-9f0c-8db293683f79",
      "credentials": {
        "telegramApi": {
          "id": "w3HIcBgC88omBsJ7",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "=-1003140416257",
        "text": "={{ $json.imageUrl }}\n{{ $json.title }}\n{{ $json.content }}\n{{ $json.formattedText }}",
        "additionalFields": {
          "disable_web_page_preview": false,
          "parse_mode": "=HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -47984,
        8592
      ],
      "id": "f07635e7-1c1a-49ec-ae7c-d892ab1f988f",
      "name": "Send Message",
      "webhookId": "891441b4-f3ed-42ae-a7fa-9084e88d33fe",
      "credentials": {
        "telegramApi": {
          "id": "w3HIcBgC88omBsJ7",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtMinute": 15
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -49520,
        8496
      ],
      "id": "6fdc4253-57a0-4323-954d-363e1ae60f75",
      "name": "Schedule Trigger2"
    },
    {
      "parameters": {
        "url": "https://wesh.ir/feed/",
        "options": {}
      },
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1.2,
      "position": [
        -49312,
        8496
      ],
      "id": "f4f1e827-0a71-45f2-ad69-9a0b911cb50d",
      "name": "RSS Read2"
    },
    {
      "parameters": {
        "url": "={{ $json.link }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9,fa;q=0.8"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -48864,
        8496
      ],
      "id": "8a794d67-17c5-4c6a-9de0-ff5f656b1ce8",
      "name": "HTTP Request4"
    }
  ],
  "pinData": {},
  "connections": {
    "RSS Read": {
      "main": [
        [
          {
            "node": "Code in JavaScript3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript2": {
      "main": [
        [
          {
            "node": "Send a photo message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "RSS Read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Code in JavaScript2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript3": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "extractImageFromFeed": {
      "main": [
        []
      ]
    },
    "chooseAndNormalizeImage": {
      "main": [
        [
          {
            "node": "HTTP Request3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "formatForTelegram": {
      "main": [
        [
          {
            "node": "checkImageExists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "checkImageExists": {
      "main": [
        [
          {
            "node": "downloadImage",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "downloadImage": {
      "main": [
        [
          {
            "node": "setBinaryData",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "setBinaryData": {
      "main": [
        [
          {
            "node": "Send a photo message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger1": {
      "main": [
        [
          {
            "node": "RSS Read1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RSS Read1": {
      "main": [
        [
          {
            "node": "HTML2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "HTML1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML1": {
      "main": [
        [
          {
            "node": "chooseAndNormalizeImage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request3": {
      "main": [
        [
          {
            "node": "formatForTelegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML2": {
      "main": [
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Decode Link": {
      "main": [
        [
          {
            "node": "HTTP Request4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML Extract": {
      "main": [
        [
          {
            "node": "Format Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Message": {
      "main": [
        [
          {
            "node": "Check Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Image": {
      "main": [
        [
          {
            "node": "Send Photo",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger2": {
      "main": [
        [
          {
            "node": "RSS Read2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RSS Read2": {
      "main": [
        [
          {
            "node": "Decode Link",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request4": {
      "main": [
        [
          {
            "node": "HTML Extract",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "9ecd7fcd-c430-42fe-b6db-7b297803055a",
  "meta": {
    "instanceId": "e9ab7552981b4061a4ecd9f94dfb88c0d9ea8398e961467ddb816643976354e1"
  },
  "id": "2oVqZwqOndyErqhS",
  "tags": []
}