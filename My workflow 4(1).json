{
  "name": "My workflow 4",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtMinute": 15
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        240,
        300
      ],
      "id": "52c4a316-39c9-48b7-8cf8-80307ae81243",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "url": "https://wesh.ir/feed/",
        "options": {}
      },
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1.2,
      "position": [
        460,
        300
      ],
      "id": "526eb62c-a4c1-49b4-a5e3-e8ee66eb6bcd",
      "name": "RSS Read"
    },
    {
      "parameters": {
        "jsCode": "// Decode Link and Validate\nconst items = $input.all();\nconst validItems = [];\n\nfor (const item of items) {\n  const json = item.json;\n  \n  // Get and validate link\n  let link = json.link || '';\n  link = link.trim();\n  \n  // Skip items without valid link\n  if (!link || link.length < 10 || (!link.startsWith('http://') && !link.startsWith('https://'))) {\n    console.log('Skipping item with invalid link:', link);\n    continue;\n  }\n  \n  // Decode URL-encoded characters\n  try {\n    link = decodeURIComponent(link);\n  } catch (e) {\n    // keep original if decode fails\n  }\n  \n  // Keep original data + decoded link\n  validItems.push({\n    json: {\n      ...json,\n      link: link,\n      originalTitle: json.title || 'Ø¨Ø¯ÙˆÙ† Ø¹Ù†ÙˆØ§Ù†'\n    }\n  });\n}\n\nreturn validItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        680,
        300
      ],
      "id": "b50ae6bf-8bb5-4280-9aa9-da09e91d0956",
      "name": "Decode Link"
    },
    {
      "parameters": {
        "url": "={{ $json.link }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9,fa;q=0.8"
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": {
            "retry": {
              "maxRetries": 2,
              "retryInterval": 1000
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        900,
        300
      ],
      "id": "5e5d8d89-9540-4774-a691-46e570ae9185",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "dataPropertyName": "data",
        "extractionValues": {
          "values": [
            {
              "key": "title",
              "cssSelector": "title"
            },
            {
              "key": "content",
              "cssSelector": "p"
            },
            {
              "key": "imageUrl",
              "cssSelector": "figure img",
              "returnValue": "attribute",
              "attribute": "src"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        1120,
        300
      ],
      "id": "e4d98a87-78ec-44ed-96de-1686df7243de",
      "name": "HTML Extract"
    },
    {
      "parameters": {
        "jsCode": "// Format Message for Telegram\nconst items = $input.all();\nconst formattedItems = [];\n\nfor (const item of items) {\n  const json = item.json;\n  \n  // Get data from HTML Extract\n  const title = json.title || json.originalTitle || 'Ø¨Ø¯ÙˆÙ† Ø¹Ù†ÙˆØ§Ù†';\n  const content = Array.isArray(json.content) ? json.content.join('\\n\\n') : (json.content || '');\n  const link = json.link || '';\n  let imageUrl = json.imageUrl || '';\n  \n  // Validate and normalize image URL\n  if (imageUrl) {\n    imageUrl = imageUrl.trim();\n    \n    // Make absolute URL if relative\n    if (imageUrl && !imageUrl.startsWith('http://') && !imageUrl.startsWith('https://')) {\n      try {\n        const base = new URL(link);\n        imageUrl = new URL(imageUrl, link).href;\n      } catch (e) {\n        imageUrl = ''; // Invalid URL\n      }\n    }\n    \n    // Validate image (not video, not logo)\n    const invalidKeywords = ['aparat', 'logo', 'icon', 'banner', 'avatar'];\n    const videoExtensions = ['.mp4', '.webm', '.avi', '.mov', '.flv', '.mkv'];\n    const validImageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.svg'];\n    \n    const urlLower = imageUrl.toLowerCase();\n    const hasVideoExtension = videoExtensions.some(ext => urlLower.includes(ext));\n    const hasInvalidKeyword = invalidKeywords.some(k => urlLower.includes(k));\n    const hasValidExtension = validImageExtensions.some(ext => urlLower.endsWith(ext));\n    \n    if (hasVideoExtension || hasInvalidKeyword || !hasValidExtension) {\n      imageUrl = ''; // Invalid image\n    }\n  }\n  \n  // Create summary (first 500 chars of content)\n  let summary = content.substring(0, 500);\n  if (content.length > 500) {\n    summary += '...';\n  }\n  \n  // Format caption\n  let caption = `ðŸ“° <b>${title}</b>\\n\\n${summary}\\n\\nðŸ”— <a href=\"${link}\">Ø§Ø¯Ø§Ù…Ù‡ Ù…Ø·Ù„Ø¨ Ø¯Ø± ÙˆØ¨Ø³Ø§ÛŒØª</a>\\n\\nðŸ“¡ @wesh_ir`;\n  \n  // Limit caption to 950 characters\n  if (caption.length > 950) {\n    const maxSummaryLength = 950 - title.length - link.length - 100;\n    summary = content.substring(0, maxSummaryLength) + '...';\n    caption = `ðŸ“° <b>${title}</b>\\n\\n${summary}\\n\\nðŸ”— <a href=\"${link}\">Ø§Ø¯Ø§Ù…Ù‡ Ù…Ø·Ù„Ø¨ Ø¯Ø± ÙˆØ¨Ø³Ø§ÛŒØª</a>\\n\\nðŸ“¡ @wesh_ir`;\n  }\n  \n  formattedItems.push({\n    json: {\n      caption: caption,\n      imageUrl: imageUrl,\n      hasImage: Boolean(imageUrl),\n      chatId: '-1003140416257'\n    }\n  });\n}\n\nreturn formattedItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1340,
        300
      ],
      "id": "3bfee3de-94de-42c0-a421-a4b7aada4e38",
      "name": "Format Message"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "boolean1",
              "leftValue": "={{ $json.hasImage }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1560,
        300
      ],
      "id": "c3d4e5f6-a7b8-9012-cdef-123456789012",
      "name": "Check Image"
    },
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "operation": "sendPhoto",
        "chatId": "={{ $json.chatId }}",
        "photo": "={{ $json.imageUrl }}",
        "additionalFields": {
          "caption": "={{ $json.caption }}",
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1780,
        200
      ],
      "id": "9a2c38e8-9179-4f29-b5e8-edc751f56354",
      "name": "Send Photo",
      "credentials": {
        "httpHeaderAuth": {
          "id": "telegram_bot_token",
          "name": "Telegram Bot"
        }
      }
    },
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "operation": "sendMessage",
        "chatId": "={{ $json.chatId }}",
        "text": "={{ $json.caption }}",
        "additionalFields": {
          "parse_mode": "HTML",
          "disable_web_page_preview": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1780,
        400
      ],
      "id": "d4e5f6a7-b8c9-0123-def4-567890123456",
      "name": "Send Message",
      "credentials": {
        "httpHeaderAuth": {
          "id": "telegram_bot_token",
          "name": "Telegram Bot"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "RSS Read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RSS Read": {
      "main": [
        [
          {
            "node": "Decode Link",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Decode Link": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "HTML Extract",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML Extract": {
      "main": [
        [
          {
            "node": "Format Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Message": {
      "main": [
        [
          {
            "node": "Check Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Image": {
      "main": [
        [
          {
            "node": "Send Photo",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Photo": {
      "main": [
        []
      ]
    },
    "Send Message": {
      "main": [
        []
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "532ee310-11b6-4ebb-9e1f-000f7060cd8f",
  "meta": {
    "instanceId": "e9ab7552981b4061a4ecd9f94dfb88c0d9ea8398e961467ddb816643976354e1"
  },
  "id": "2oVqZwqOndyErqhS",
  "tags": []
}
