{
  "name": "Air Quality Monitor - Mashhad (Payesh)",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours"
            }
          ]
        }
      },
      "id": "6bc42820-51d7-4e30-b37e-69ee6dcd4475",
      "name": "Every Hour",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -1104,
        112
      ]
    },
    {
      "parameters": {
        "url": "https://payesh.mashhad.ir/api/Dashboard/Citizen",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "User-Agent",
              "value": "n8n-payesh-fetcher/1.0"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "c0ad8acf-52e7-4741-8fd6-36963871ea47",
      "name": "Get Dashboard (Payesh)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -880,
        112
      ]
    },
    {
      "parameters": {
        "jsCode": "// Build Telegram Markdown message from payesh.mashhad.ir API response\nconst data = $input.item.json.data || $input.item.json; // safe access\nconst faNums = ['۰','۱','۲','۳','۴','۵','۶','۷','۸','۹'];\n\nfunction toFaDigits(s){\n  if (s === null || s === undefined) return '';\n  return String(s).replace(/\\d/g, d => faNums[Number(d)]);\n}\n\nfunction fmtTime(iso){\n  try{\n    const d = new Date(iso);\n    return d.toLocaleString('fa-IR', { hour: '2-digit', minute: '2-digit', year:'numeric', month:'2-digit', day:'2-digit' });\n  } catch(e){ return iso || ''; }\n}\n\n// تابع تشخیص سطح آلودگی و ایموجی\nfunction getAQIInfo(aqi) {\n  if (aqi <= 50) {\n    return {\n      emoji: '🔵',\n      level: 'خوب',\n      description: 'کیفیت هوا رضایت‌بخش است و آلودگی هوا کم یا بدون خطر است.'\n    };\n  } else if (aqi <= 100) {\n    return {\n      emoji: '🟢',\n      level: 'قابل‌قبول',\n      description: 'کیفیت هوا قابل قبول است. برای برخی افراد حساس ممکن است نگرانی جزئی وجود داشته باشد.'\n    };\n  } else if (aqi <= 150) {\n    return {\n      emoji: '🟡',\n      level: 'ناسالم برای گروه‌های حساس',\n      description: 'افراد حساس ممکن است تحت تأثیر قرار گیرند. عموم مردم احتمالاً تحت تأثیر قرار نمی‌گیرند.'\n    };\n  } else if (aqi <= 200) {\n    return {\n      emoji: '🔴',\n      level: 'ناسالم',\n      description: 'همه ممکن است شروع به احساس اثرات بر سلامتی کنند. افراد حساس ممکن است اثرات جدی‌تری را تجربه کنند.'\n    };\n  } else if (aqi <= 300) {\n    return {\n      emoji: '🟣',\n      level: 'بسیار ناسالم',\n      description: 'هشدار سلامت: همه ممکن است اثرات جدی‌تری بر سلامتی را تجربه کنند.'\n    };\n  } else {\n    return {\n      emoji: '⚫',\n      level: 'خطرناک',\n      description: 'هشدار سلامت در سطح اضطراری: کل جمعیت بیشتر در معرض تأثیر قرار دارند.'\n    };\n  }\n}\n\n// تابع پیشنهاد رفتاری\nfunction getAdvice(aqi) {\n  if (aqi <= 50) {\n    return '🌿 هوای امروز برای بیشتر افراد مناسب است. می‌توانید از فضای باز لذت ببرید.';\n  } else if (aqi <= 100) {\n    return '✅ افراد بسیار حساس باید فعالیت‌های طولانی در فضای باز را محدود کنند.';\n  } else if (aqi <= 150) {\n    return '⚠️ افراد حساس، کودکان و سالمندان باید فعالیت‌های طولانی در فضای باز را کاهش دهند.';\n  } else if (aqi <= 200) {\n    return '🚫 فعالیت ورزشی در فضای باز توصیه نمی‌شود. اگر بیرون می‌روید، از ماسک استفاده کنید.';\n  } else if (aqi <= 300) {\n    return '⛔ از فعالیت در فضای باز خودداری کنید. افراد حساس در خانه بمانند و از ماسک N95 استفاده کنند.';\n  } else {\n    return '🆘 وضعیت اضطراری! همه باید در فضای بسته بمانند و از تصفیه‌کننده هوا استفاده کنند.';\n  }\n}\n\n// -------------- summary top (worst) stations --------------\nconst stations = data.stationsAQI || [];\nconst mapped = stations.map(s => {\n  const v = s.value || {};\n  return {\n    name: s.label || '',\n    aqi: Number(v.aqi || 0),\n    param: v.influetialParameter || '',\n    time: v.dateTime || ''\n  };\n});\n\n// sort desc by aqi\nmapped.sort((a,b)=>b.aqi - a.aqi);\nconst top5 = mapped.slice(0,5);\n\n// overall city aqi from root\nconst cityAqi = Number(data.aqi ?? data.instantAqi ?? 0);\nconst cityAqiFa = toFaDigits(cityAqi);\nconst aqiInfo = getAQIInfo(cityAqi);\nconst advice = getAdvice(cityAqi);\n\n// time\nconst measurementTime = data.airQualityMeasurementDateTime || (top5[0] && top5[0].time) || '';\nconst measurementTimeFmt = measurementTime ? fmtTime(measurementTime) : '—';\n\n// Build markdown message\nlet msg = `*شاخص کیفیت هوا — مشهد*\\n\\n`;\nmsg += `🕐 زمان اندازه‌گیری: ${measurementTimeFmt}\\n\\n`;\n\n// شاخص کل شهر با ایموجی\nmsg += `📊 *شاخص کل شهر: ${cityAqiFa} ${aqiInfo.emoji}*\\n`;\nmsg += `سطح: *${aqiInfo.level}*\\n\\n`;\n\n// توضیح وضعیت\nmsg += `💬 ${aqiInfo.description}\\n\\n`;\n\n// پیشنهاد رفتاری\nmsg += `${advice}\\n\\n`;\n\n// پنج ایستگاه با بدترین وضعیت\nmsg += `*📍 پنج ایستگاه با بدترین وضعیت:*\\n`;\n\ntop5.forEach((s,i)=>{\n  const stationInfo = getAQIInfo(s.aqi);\n  msg += `${i+1}. *${s.name}* — ${toFaDigits(s.aqi)} ${stationInfo.emoji}`;\n  if(s.param) msg += ` — آلاینده: ${s.param}`;\n  msg += `\\n`;\n});\n\nmsg += `\\n_🤖 پیام خودکار — هر ساعت به‌روزرسانی می‌شود_`;\n\nreturn [{ json: { send: true, message: msg, meta: { cityAqi: cityAqi, measuredAt: measurementTime } } }];"
      },
      "id": "db307a24-6343-405d-9cb8-99c53ef2e473",
      "name": "Build Telegram Message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -656,
        112
      ]
    },
    {
      "parameters": {
        "jsCode": "// Add trend information by comparing with previous AQI\nconst input = $input.item.json;\nconst currentAqi = input.meta.cityAqi;\nconst currentMessage = input.message;\n\n// دسترسی به Workflow Static Data\nconst workflowStaticData = this.getWorkflowStaticData('global');\nconst previousAqi = workflowStaticData.lastAqi || null;\n\n// محاسبه روند\nlet trendInfo = '';\nif (previousAqi !== null && previousAqi !== undefined) {\n  const diff = currentAqi - previousAqi;\n  const diffAbs = Math.abs(diff);\n  const faNums = ['۰','۱','۲','۳','۴','۵','۶','۷','۸','۹'];\n  const toFaDigits = (s) => String(s).replace(/\\d/g, d => faNums[Number(d)]);\n  \n  if (diff > 0) {\n    // بدتر شده\n    trendInfo = `🔺 نسبت به ساعت قبل: افزایش ${toFaDigits(diffAbs)} واحدی`;\n  } else if (diff < 0) {\n    // بهتر شده\n    trendInfo = `🔻 نسبت به ساعت قبل: بهبود ${toFaDigits(diffAbs)} واحدی`;\n  } else {\n    // تغییری نکرده\n    trendInfo = `➡️ نسبت به ساعت قبل: بدون تغییر`;\n  }\n}\n\n// ذخیره AQI فعلی برای دفعه بعد\nworkflowStaticData.lastAqi = currentAqi;\n\n// اضافه کردن روند به پیام (بعد از خط \"سطح:\")\nlet updatedMessage = currentMessage;\nif (trendInfo) {\n  const lines = currentMessage.split('\\n');\n  const updatedLines = [];\n  \n  for (let i = 0; i < lines.length; i++) {\n    updatedLines.push(lines[i]);\n    // بعد از خط \"سطح:\" روند را اضافه کن\n    if (lines[i].includes('سطح:')) {\n      updatedLines.push(trendInfo);\n    }\n  }\n  \n  updatedMessage = updatedLines.join('\\n');\n}\n\nreturn [{ json: { send: input.send, message: updatedMessage, meta: input.meta } }];"
      },
      "id": "a7f3e8b9-1234-5678-9abc-def012345678",
      "name": "Add Trend Info",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -552,
        112
      ]
    },
    {
      "parameters": {
        "jsCode": "const input = items[0].json;\nconst lastSent = $json[\"last_sent_measuredAt\"];  // از Workflow Data node قبلی\nconst measuredAt = input.meta?.measuredAt || new Date().toISOString();\n\nif (lastSent === measuredAt) {\n  return [{ json: { send: false } }];\n}\n\n// خروجی برای آپدیت Workflow Data\nreturn [\n  { json: { send: true, message: input.message, last_sent_measuredAt: measuredAt } }\n];\n"
      },
      "id": "c2ea4a38-74cd-420d-9cd1-933715bde05d",
      "name": "Deduplicate / Send Control",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -448,
        112
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.send }}",
              "value2": true
            }
          ]
        },
        "options": {}
      },
      "id": "9e751a18-afc8-4ffe-beb6-1ec1ffb8ae9d",
      "name": "Should Send?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -224,
        112
      ]
    },
    {
      "parameters": {
        "chatId": "-1003207884746",
        "text": "={{$json[\"message\"]}}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        16,
        112
      ],
      "id": "18cea6f8-1d82-417d-bf60-726ffd884e89",
      "name": "payeshhavaymashhad",
      "webhookId": "8669ec39-5336-4fba-8d44-e08422deb0dd",
      "credentials": {
        "telegramApi": {
          "id": "XQQsqYp1ELPoAiPW",
          "name": "Telegram account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Every Hour": {
      "main": [
        [
          {
            "node": "Get Dashboard (Payesh)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Dashboard (Payesh)": {
      "main": [
        [
          {
            "node": "Build Telegram Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Telegram Message": {
      "main": [
        [
          {
            "node": "Add Trend Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add Trend Info": {
      "main": [
        [
          {
            "node": "Deduplicate / Send Control",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Deduplicate / Send Control": {
      "main": [
        [
          {
            "node": "Should Send?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should Send?": {
      "main": [
        [
          {
            "node": "payeshhavaymashhad",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "28ca7331-d946-4d6f-b4a7-ce57370b9094",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "4e0628fc4b63415fcf4675b9a65d35e9aec0859861006249ad779582a713f03d"
  },
  "id": "LgECL8ZwULpglRKY",
  "tags": []
}